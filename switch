#!/usr/bin/env sh

# ----------------------------------------------------------------------------
# Switch nix configurations using nixos-rebuild, darwin-rebuild or
# home-manager (for standalone settings).
# ----------------------------------------------------------------------------

# Set global vars used in this script.
DIR="${HOME}/conf"
_STASH="${DIR}/lib/stash/bin/stash"

# Check if we are on macos.
if [ "$(uname -s)" = "Darwin" ]; then
    REBUILD_CMD="darwin-rebuild"
    # APP_CONFIG="${HOME}/Library/Application Support"
    FIREFOX_PROFILES_DIR="${HOME}/Library/Application Support/Firefox/Profiles"
    LIBREWOLF_PROFILES_DIR="${HOME}/Library/Application Support/librewolf/Profiles"
else
    REBUILD_CMD="nixos-rebuild"
    FIREFOX_PROFILES_DIR="${HOME}/.mozilla/firefox"
    LIBREWOLF_PROFILES_DIR="${HOME}/.librewolf"
fi

usage() {
    cat <<EOF
Usage:
    switch home [attribute]
    switch system [attribute]
    switch ln [options]
    switch update <package>

Commands:
    home   - Use (standalone) home-manager and stash to update user configuration.
    system - Update system settings in nixos or nix-darwin.
    ln     - Link configuration files not handled by home-manager.
    update - Update the flake lockfile's entry for the input package.

Options:
    -h|--help          Display this this usage message.
EOF
}

usage_home() {
    cat <<EOF
Description:
    Manage a system via a standalone home-manager installation.
    Do not use with a system configuration that includes home-manager as a
    module.

Usage:
    switch home [attribute]

Args:
    attribute: An attribute in the ${DIR}/flake.nix homeConfigurations output.
        Defaults to the current username.

Options:
    -h|--help          Display this this usage message.
EOF
}

usage_system() {
    cat <<EOF
Usage:
    switch system [attribute]

Args:
    attribute: An attribute in the ${DIR}/flake.nix nixosConfigurations or darwinConfigurations output.

Options:
    -h|--help          Display this this usage message.
EOF
}

usage_ln() {
    cat <<EOF
Usage:
    switch ln [options]

Description:
    Link configuration files not handled by home-manager. This is a thin
    wrapper around the stash symlink manager. All files to be linked should
    live in ${DIR}/etc.

Options:
    -h|--help          Display this this usage message.

Displaying help for ${_STASH}:

EOF
    "${_STASH}" --help
}

usage_update() {
    cat <<EOF
Usage:
    switch update <package>

Description:
    Update nixpkgs and the flake lockfile entry for the input package.

Options:
    -h|--help          Display this this usage message.

EOF
}

_nix_build() {
    # Build nix-darwin or home-manager (standalone) for first time.
    echo "switch: Building initial flake attribute with nix build ${DIR}/#$1"
    nix --verbose --show-trace --extra-experimental-features "nix-command flakes" build "${DIR}/#$1"
}

_nix_darwin_backup() {
    # Sometimes nix-darwin sees unrecognized files in /etc and aborts, e.g.,
    # after some system updates.
    echo "switch: Backing up files in /etc."
    sudo mv -v /etc/shells /etc/shells.before-nix-darwin
    sudo mv -v /etc/bashrc /etc/bashrc.before-nix-darwin
    sudo mv -v /etc/zshrc /etc/zshrc.before-nix-darwin
    sudo mv -v /etc/zprofile /etc/zprofile.before-nix-darwin
    sudo mv -v /etc/zshenv /etc/zshenv.before-nix-darwin
}

_build_nix_darwin() {
    # Build nix-darwin for first time.
    if [ -z "$1" ]; then
        echo "switch: No host specified to initialize nix-darwin."
    fi
    echo "switch: Did not detect darwin-rebuild command."
    _nix_darwin_backup
    _nix_build "darwinConfigurations.$1.system"
    retrun 0
}

_build_home_manager() {
    # Build home-manager for the first time.
    if [ -z "$1" ]; then
        echo "switch: No home-manager target specified."
        exit 1
    fi
    echo "switch: Did not detect home-manager command."
    echo "switch: Building home manager configuration for $1."
    _nix_build "homeConfigurations.$1.activationPackage"
    ./result/activate
    echo "switch: Restart shell to ensure changes."
}

_switch() {
    # Wrapper around nixos-rebuild|darwin-rebuild|home-manager switch command
    # usage: _switch cmd [attr]
    if [ -z "$1" ]; then
        echo "switch: rebuild command not specified."
        exit 1
    fi
    if [ -z "$2" ]; then
        attr="$DIR"
    else
        attr="$DIR/#$2"
    fi
    echo "switch: Switching configuration using $1 switch --flake ${attr}"
    "$1" --show-trace --verbose switch --flake "${attr}"
}

switch_ln() {
    # Define which files get linked here.
    "${_STASH}" "$@" "${DIR}/etc/home" "${HOME}"
    # Link custom firefox CSS files. The profile name is dynamic.
    if [ -d "${FIREFOX_PROFILES_DIR}" ]; then
        "${_STASH}" "$@" "${DIR}/etc/home/.config/firefox/chrome" "$(find "${FIREFOX_PROFILES_DIR}"/*default* -maxdepth 0 -type d)/chrome"
    fi
    if [ -d "${LIBREWOLF_PROFILES_DIR}" ]; then
        "${_STASH}" "$@" "${DIR}/etc/home/.config/firefox/chrome" "$(find "${LIBREWOLF_PROFILES_DIR}"/*default-default -maxdepth 0 -type d)/chrome"
    fi
}


switch_system() {
    # rebuild the system configuration.
    # target defaults to compute name
    target="${1:-$(hostname -s)}"
    cmd="${REBUILD_CMD}"
    # The rebuild command always exists on nixOS.
    if ! command -v "${REBUILD_CMD}" 1> /dev/null; then
        _build_nix_darwin "${target}"
        cmd="${DIR}/result/sw/bin/darwin-rebuild"
    fi
    _switch "${cmd}" "${target}"
    switch_ln --force
    return 0
}


switch_home() {
    # rebuild the (standalone) home-manager configuration
    target="${1:-$(whoami)}"
    if ! command -v "home-manager" 1> /dev/null; then
        _build_home_manager "${target}"
    else
        _switch "home-manager" "${target}"
    fi
    
    switch_ln --force

    return 0
}

switch_update() {
    # Update nixpkgs and the input package
    nix flake lock --update-input nixpkgs --update-input "$1"
}

switch_uninstall() {
    echo "Warning: This will uninstall Nix from your system. Are you sure? (y/N)"
    read -r response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        uninstall_nix
    else
        echo "Uninstall cancelled."
    fi
}

uninstall_nix() {
    # Detect the operating system
    if [[ "$(uname)" == "Darwin" ]]; then
        uninstall_nix_macos
    elif [[ "$(uname)" == "Linux" ]]; then
        uninstall_nix_linux
    else
        echo "Unsupported operating system. This script only works on macOS and Linux."
        exit 1
    fi
}

uninstall_nix_linux() {
    if [[ -d /nix/var/nix/profiles/default ]]; then
        echo "Detected multi-user Nix installation on Linux."
        
        echo "Stopping and disabling Nix daemon..."
        sudo systemctl stop nix-daemon.service
        sudo systemctl disable nix-daemon.socket nix-daemon.service
        sudo systemctl daemon-reload

        echo "Removing Nix files..."
        sudo rm -rf /etc/nix /etc/profile.d/nix.sh /etc/tmpfiles.d/nix-daemon.conf /nix ~root/.nix-channels ~root/.nix-defexpr ~root/.nix-profile

        echo "Removing build users..."
        for i in $(seq 1 32); do
            sudo userdel nixbld$i
        done
        sudo groupdel nixbld

        echo "Please check and remove Nix-related lines from the following files if they exist:"
        echo "  /etc/bash.bashrc"
        echo "  /etc/bashrc"
        echo "  /etc/profile"
        echo "  /etc/zsh/zshrc"
        echo "  /etc/zshrc"
    else
        echo "Detected single-user Nix installation on Linux."
        rm -rf /nix
    fi

    echo "Nix has been uninstalled from your system."
}

uninstall_nix_macos() {
    if [[ -d /nix/var/nix/profiles/default ]]; then
        echo "Detected multi-user Nix installation on macOS."

        echo "Removing Nix-related lines from shell configuration files..."
        sudo mv /etc/zshrc.backup-before-nix /etc/zshrc
        sudo mv /etc/bashrc.backup-before-nix /etc/bashrc
        sudo mv /etc/bash.bashrc.backup-before-nix /etc/bash.bashrc

        echo "Stopping and removing Nix daemon services..."
        sudo launchctl unload /Library/LaunchDaemons/org.nixos.nix-daemon.plist
        sudo rm /Library/LaunchDaemons/org.nixos.nix-daemon.plist
        sudo launchctl unload /Library/LaunchDaemons/org.nixos.darwin-store.plist
        sudo rm /Library/LaunchDaemons/org.nixos.darwin-store.plist

        echo "Removing nixbld group and users..."
        sudo dscl . -delete /Groups/nixbld
        for u in $(sudo dscl . -list /Users | grep _nixbld); do 
            sudo dscl . -delete /Users/$u
        done

        echo "Removing Nix Store volume from fstab..."
        sudo sed -i '' '/Nix Store/d' /etc/fstab

        echo "Removing nix line from /etc/synthetic.conf..."
        sudo sed -i '' '/^nix$/d' /etc/synthetic.conf

        echo "Removing Nix files..."
        sudo rm -rf /etc/nix /var/root/.nix-profile /var/root/.nix-defexpr /var/root/.nix-channels ~/.nix-profile ~/.nix-defexpr ~/.nix-channels

         echo "Removing Nix Store volume..."
        if [ -x /usr/sbin/diskutil ]; then
            sudo /usr/sbin/diskutil apfs deleteVolume /nix
        else
            echo "Warning: diskutil command not found. Unable to remove Nix Store volume automatically."
            echo "You may need to remove the /nix volume manually using Disk Utility."
        fi

        echo "Nix has been uninstalled from your system."
        echo "Note: An empty /nix directory may remain until you reboot."
    else
        echo "Detected single-user Nix installation on macOS."
        rm -rf /nix
        echo "Nix has been uninstalled from your system."
    fi
}

switch_install() {
    if [ "$(uname -s)" = "Darwin" ]; then
        echo "Installing Xcode Command Line Tools..."
        xcode-select --install
    fi
    echo "Installing Nix..."
    curl -L https://nixos.org/nix/install | sh -s -- --daemon
}

# Parse subcommands.
case "$1" in
    system|home|ln|update|uninstall|install)  # Add 'install' here
        cmd="$1"
        shift
        ;;
    backup)
        _nix_darwin_backup
        exit
        ;;
    --help|-h)
        usage
        exit
        ;;
    *)
        cmd="system"
        ;;
esac

# Parse subcommand args.
case "$1" in
    --help|-h)
        "usage_${cmd}"
        ;;
    *)
        "switch_${cmd}" "$@"
        exit
        ;;
esac
